---
title: "black box design principles"
format: 
  html:
    toc: true
    html-math-method: mathjax
    theme: none
    minimal: true
    embed-resources: true
vignette: >
  %\VignetteIndexEntry{black box design principles}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(episoap)
```

# Introduction

More and more public health services and agencies are encouraging the use of health information systems (HIS) to store data of various kinds. Thus, the exploitation of this data through statistical analysis tools and methods can promote the rapid implementation of epidemic response strategies. We therefore intend to dedicate this vignette to the development of pipelines that will make it possible to link the different steps necessary to estimate vital parameters to understand the dynamics of an infectious disease. In the following sections, we will show how to establish and execute a pipeline to prepare and analyze data to derive information on the severity and transmissibility of a disease.

## Defining the severity workflow

![The severity workflow](../man/figures/severity_diagram.drawio.png){align="center"}

### Creation of a configuration file

The first rule of the severity pipeline is to create a template configuration file. This is a YAML file where users specify the input parameters.
We expect that this YAML file does not exist at the beginning, and is created in the user's current working directory using the `cfr()` function.

* rule create_config:
    * input:
        * "none",
    * output:
        * "A character with the path to the YAML file"
    * function:
        * cfr()

### Determining the data type

The second rule for the severity pipeline is `get_data_type`. It is intended to about the type of data provided by the user. This determines how CFR is calculated. The current version of the pipeline accounts for three types of data: count data, linelist data, and incidence data.
The rule will look like below.

* rule get_data_type:
    * input:
        * "user-provided arguments: data, total_cases, total_deaths",
    * output:
        * "A character with one of: count_data, linelist, incidence"
    * function:
        * get_data_type()


::: {.callout-note collapse="true"}
## `get_data_type()`

This function does not exist for now. Atta to create it. 
:::


### Estimate severity from count data

When the output of the `get_data_type()` function is `count_data` i.e. the count of total cases, deaths, and (optionally) the count of deaths among confirmed cases are provided, CFR is estimated using the `calculate_cfr_from_counts()` function.

The function takes these three arguments and returns a data frame with one or two rows (when the count of deaths among confirmed cases is provided). This data frame stores the values of the estimated disease severity and their associated confidence interval.

* rule calculate_cfr_from_counts:
    * input:
        * "total_cases, total_deaths, death_in_confirmed",
    * output:
        * "A data.frame with one or two rows"
    * function:
        * calculate_cfr_from_counts()

### Estimate severity from linelist or incidence data

When the output of the `get_data_type()` function is `linelist` i.e. the input data is linelist where the count of cases is stored over time, CFR is estimated using the `calculate_cfr()` function, makes internally calls the `calculate_cfr_from_incidence()`. The function works as following:
    *   When cases are not recorded in a linelist on a daily basis, the data is first
    converted into a daily incidence using the `convert_to_incidence()` function.
    *   When cases are provided in the form of a weekly, monthly or any other frequency than
    daily incidence, the data will be converted into daily incidence using the
    `get_sequential_dates()` function.
    *   When the delay distribution is not provided, but the parameters to estimate it are
    provided, then the `get_onset_to_death_distro()` function is used to get the delay
    distribution

* rule calculate_cfr:
    * input:
        * "data, epidist, epidist_params",
    * output:
        * "A data.frame with one or two rows"
    * function:
        * calculate_cfr()

### The internal functions










